// backend/utils/generatePDF.js
const { jsPDF } = require('jspdf');  // âœ… correct import

const generatePDF = async (complaint) => {
  try {
    console.log('Generating PDF for complaint:', complaint._id);

    if (!complaint) {
      throw new Error('Complaint data is required');
    }

    const doc = new jsPDF();

    // Header
    doc.setFontSize(18);
    doc.text('KaavalCircle - Complaint Report', 105, 15, { align: 'center' });

    // Complaint Info
    doc.setFontSize(12);
    doc.text(`Complaint ID: ${complaint._id}`, 20, 30);
    doc.text(`Date: ${new Date(complaint.createdAt).toLocaleDateString()}`, 20, 40);
    doc.text(`Category: ${complaint.category}`, 20, 50);
    doc.text(`Status: ${complaint.status}`, 20, 60);

    // Description
    doc.text('Description:', 20, 80);
    const desc = doc.splitTextToSize(complaint.description || '', 170);
    doc.text(desc, 20, 90);

    // Location
    const addressText =
      complaint.location && complaint.location.address
        ? complaint.location.address
        : 'N/A';
    doc.text(`Location: ${addressText}`, 20, 120);

    // Citizen Info
    if (complaint.citizenId) {
      doc.text(`Reported by: ${complaint.citizenId.name}`, 20, 140);
      doc.text(`Contact: ${complaint.citizenId.phone}`, 20, 150);
    }

    // Footer
    doc.setFontSize(10);
    doc.text(
      'Generated by KaavalCircle - From Citizen For Citizen With Police',
      105,
      280,
      { align: 'center' }
    );

    console.log('PDF generation completed');

    // Return Buffer for controller
    const arrayBuffer = doc.output('arraybuffer');
    return Buffer.from(arrayBuffer);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF: ' + error.message);
  }
};

module.exports = generatePDF;
