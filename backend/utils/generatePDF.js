// backend/utils/generatePDF.js
const jsPDF = require('jspdf');

const generatePDF = async (complaint) => {
  try {
    console.log('Generating PDF for complaint:', complaint._id);
    
    if (!complaint) {
      throw new Error('Complaint data is required');
    }
    
    const doc = new jsPDF();
    
    // Add header
    doc.setFontSize(18);
    doc.text('KaavalCircle - Complaint Report', 105, 15, { align: 'center' });
    
    // Add complaint details
    doc.setFontSize(12);
    doc.text(`Complaint ID: ${complaint._id}`, 20, 30);
    doc.text(`Date: ${new Date(complaint.createdAt).toLocaleDateString()}`, 20, 40);
    doc.text(`Category: ${complaint.category}`, 20, 50);
    doc.text(`Status: ${complaint.status}`, 20, 60);
    
    // Add description
    doc.text('Description:', 20, 80);
    const splitDescription = doc.splitTextToSize(complaint.description, 170);
    doc.text(splitDescription, 20, 90);
    
    // Add location
    doc.text(`Location: ${complaint.location.address}`, 20, 120);
    
    // Add citizen info
    if (complaint.citizenId) {
      doc.text(`Reported by: ${complaint.citizenId.name}`, 20, 140);
      doc.text(`Contact: ${complaint.citizenId.phone}`, 20, 150);
    }
    
    // Add footer
    doc.setFontSize(10);
    doc.text('Generated by KaavalCircle - From Citizen For Citizen With Police', 105, 280, { align: 'center' });
    
    console.log('PDF generation completed');
    return doc.output('dataurlstring');
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF: ' + error.message);
  }
};

module.exports = generatePDF;